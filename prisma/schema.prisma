generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  MEMBER
  STAR
  AIDE
  ADMIN
  RESPONSABLE
  MINISTRE
  PASTEUR
  ASSISTANT_PASTEUR
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  SUPERUSER
  ADMIN
}

model Person {
  id            String       @id @default(cuid())
  firstname     String
  lastname      String
  fullname      String?
  email         String       @unique
  phone         String
  dateOfBirth   DateTime
  gender        Gender       @default(MALE)
  status        Status
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  User          User[]
  Report        Report[]
  departmentIds String[]
  churchId      String
  Church        Church       @relation(fields: [churchId], references: [id])
  Department    Department[]
}

model Church {
  id         String       @id @default(cuid())
  name       String
  address    String
  city       String
  country    String
  joinCode   String       @unique @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  User       User[]
  Department Department[]
  Person     Person[]
}

model Department {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  churchId  String
  Church    Church   @relation(fields: [churchId], references: [id])
  Person    Person[]
}

model User {
  id        String    @id @default(cuid())
  firstname String?
  lastname  String?
  email     String?   @unique
  password  String?
  image     String?
  role      Role      @default(USER)
  accounts  Account[]
  sessions  Session[]
  Person    Person?   @relation(fields: [personId], references: [id])
  personId  String?
  Church    Church?   @relation(fields: [churchId], references: [id])
  churchId  String?
  Report    Report[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Report {
  id        String   @id @default(cuid())
  content   String
  date      DateTime
  reason    String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  person    Person   @relation(fields: [personId], references: [id])
  personId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // type      ReportType @default(ENTRETIEN)
}

// enum ReportType {
//   ENTRETIEN
//   CONSEIL
//   PRIERE
//   SUIVI
//   INTEGRATION
//   DEPART
//   CLINIQUE
// }
